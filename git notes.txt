What is Version Control?

Version control helps developers keep track of code changes, work together smoothly, and fix problems easily.
Version control is a tool that helps you save your code step by step.

Why Do Developers Use It?
1.	Work Together – Many people can work on the same project without confusion.
2.	Undo Mistakes – You can go back if something goes wrong.
3.	See Changes – You can see what was changed and who changed it.
4.	Try Ideas – You can test new code without changing the main project.
5.	Stay Organized – It helps keep everything neat and safe.

Popular Tool
•	Git – The most common version control tool
•	Used with websites like GitHub to share and manage code online
•	You use Git to manage your code, then use GitHub to upload it, share it, or work with others.


Git	GitHub
Git is a tool you install on your computer.	GitHub is a website where you can store and share your Git projects online.
It helps you track changes to your code.	It helps you store code online, collaborate with others, and show your projects.
Works offline (on your local machine).	Works online, like Google Drive for code.
Used to create commits, branches, and versions.	Used to host repositories, review code, and manage projects with teams.
Created by developers for tracking code.	Owned by Microsoft and used by millions to share code


git –-version command : -
 is used to check if Git is installed on your computer and to see which version you have.

git config :- 
The git config command is used to set up and manage Git settings.
You use it mainly to tell Git who you are (your name and email) and to configure other preferences like your default editor or how Git behaves.
git config --global user.name "Your Name"
git config --global user.email “you@example.com”

This is important because Git uses your name and email in every commit.

git config –list : -
         show all settings

What does --global mean?
 --global: Applies the setting to all your Git projects.
Without --global: Applies the setting to only the current project.

The pwd command stands for:
Print Working Directory


git status — What It Does?
The git status command shows you the current state of your Git project.
It tells you what’s going on in your folder, like:
•	Which files are changed
•	Which files are staged (ready to commit)
•	Which files are not tracked by Git
•	Whether you're on the main branch, or a different one

.git — What Is It?

The .git folder is a hidden directory that Git creates when you run:
‘git init’
Git creates a hidden folder called .git in your project

What Does It Do?
The .git folder stores all the information about your Git project, including:
•	The full history of your changes
•	All your commits
•	Your branches
•	Configuration files
•	And more
It’s basically the brain of your Git project.
git add :-
git add is a Git command used to tell Git which files you want to include in your next commit.
When you change a file, Git doesn’t save it automatically.
You have to add it first using:
‘git add filename’    Then you can commit it using git commit.
Or, to add all files (new + changed):
‘git add.’


git commit: -
git commit -m "Your message" means:
Save your changes with a short message that describes what you did.

git clone 
git clone copies a remote Git project (repository) to your computer so you can work on it.
What does git diff do?
•	It shows you what changes you made in your files that are not saved (committed) yet.
•	•  You change a file.
•	•  Run git diff to see what you changed.
Life Cycle of a Change in Git
1. Modify Files
You change your files on your computer. These changes are only on your disk — Git doesn’t track them yet.
2. Check Changes
Run:
git diff
to see what changes you made (not saved to Git yet).
3.Stage Changes
git add filename
or
git add .
to tell Git: "I want to include these changes in the next save."
4. Check Staged Changes
git diff –staged
to see what changes are ready to be saved (committed).
5.Commit Changes
git commit -m "Your message here"
This saves your changes in Git history with a message describing what you did
6.Push Changes (optional)
If you use a remote repository (like GitHub), run:
git push
to send your saved changes to the remote server.

