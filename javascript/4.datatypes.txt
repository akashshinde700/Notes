                                                          Datatypes

data types define the kind of value a variable can hold.

===================================================================================================================================================

                                                         i> primitive data types :

They represent single values and are immutable. (You can't change the value)

                                                         1. String = Textual data

let greeting = "Hello, World!"; // Double quotes for a simple one-line string

let greeting = 'Hello, "Akash"'; // Single quotes can contain double quotes — valid for single-line strings only

let greeting = `hello,
Akash what's up`; // Backticks (template literals) allow multi-line strings
console.log(typeof greeting); // "string"


                                                         2. Number = Integer or floating-point numbers

let age = 30;
console.log(typeof age); 

                                                         3. Boolean =  Logical value: true or false  

let isActive = true;
console.log(typeof isActive); 

                                                         4. Undefined = Declared but not assigned

let notAssigned;
console.log(typeof notAssigned); 

                                                         5. Null = Explicitly no value
let emptyValue = null;
console.log(typeof emptyValue); 

                                                         6. Symbol (ES6) = Unique and immutable identifier (ES6)

let uniqueId = Symbol("id");
console.log(typeof uniqueId); // "symbol"

                                                         7. BigInt (ES11) = Large integers beyond safe Number range

let bigNumber = BigInt(1234567890123456789012345678901234567890);
console.log(typeof bigNumber); // "bigint"

===================================================================================================================================================

                                                        ii> non-primitive (reference) types:

Used to store collections of values. (hold multiple values and are mutable)


                                                        1. Object  

a collection of key-value pairs , Objects can contain properties and methods, and they are mutable.

let person = {
  name: "John",
  age: 30,
  isActive: true,
};
console.log(typeof person);

                                                       2. Array 
 
a special type of object used to store ordered collections of values. Arrays can hold multiple values in a single variable, and they are also mutable.

let numbers = [1, 2, 3, 4, 5];
console.log(typeof numbers);

                                                       3. Function = Reusable block of code


function greet() {
  console.log("Hello!");
  console.log(typeof greet);
}

                                                       4. Date 
 
a built-in object that represents dates and times. It provides methods for manipulating and formatting dates.

let currentDate = new Date();
console.log(typeof currentDate);

                                                       5. RegExp 

a built-in object that provides a way to work with regular expressions, which are patterns used to match character combinations in strings.

let regex = /ab+c/;
console.log(typeof regex);

                                                       6. Map (ES6) 
 
a collection of key-value pairs where keys can be of any type. Maps maintain the insertion order of elements and allow for efficient retrieval of values based on keys.

let map = new Map();
console.log(typeof map);

                                                       7. Set (ES6)  

a collection of unique values. Sets are useful for storing distinct values and preventing duplicates.

let set = new Set();
console.log(typeof set);

                                                       8. WeakMap (ES6) = 
 
a collection of key-value pairs where keys are objects and values can be of any type. WeakMaps do not prevent garbage collection of keys, making them useful for memory management.

let weakMap = new WeakMap();
console.log(typeof weakMap);

                                                       9. WeakSet (ES6) 

a collection of unique objects. WeakSets do not prevent garbage collection of their objects, making them useful for memory management.

let weakSet = new WeakSet();
console.log(typeof weakSet);

                                                       10. ArrayBuffer (ES6)

a low-level object that represents a fixed-length binary data buffer. It is used to handle binary data in JavaScript, especially when working with typed arrays.

let buffer = new ArrayBuffer(16);
console.log(typeof buffer);

                                                       11. Typed Arrays (ES6)  

special array-like objects that provide a way to read and write binary data in a more efficient manner. Typed arrays are backed by an ArrayBuffer and allow for different numeric types.

let intArray = new Int32Array(buffer);
console.log(typeof intArray);

                                                       12. Promise (ES6) 

an object representing the eventual completion (or failure) of an asynchronous operation and its resulting value. Promises are used to handle asynchronous operations in a more manageable way.

let promise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Operation completed successfully!");
  }, 1000);
  console.log(typeof promise);
});

===================================================================================================================================================

                                                             Mutable

Definition: A mutable object can be changed after it's created.
You can update, add, or delete properties without creating a new object.
Objects and arrays in JavaScript are mutable by default.

                                                            Immutable

Definition: An immutable object cannot be changed after it's created.
Any change returns a new value, without modifying the original.
Primitive types (like strings, numbers, booleans) in JavaScript are immutable.

===================================================================================================================================================




