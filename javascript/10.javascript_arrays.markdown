# Arrays in JavaScript

An **array** is a special type of object used to store multiple values (called **elements**) in a single variable. Arrays can hold different data types, such as numbers, strings, booleans, objects, or even other arrays.

**Syntax**:
```javascript
const arrayName = [element1, element2, element3, ...];
```

## Arrays Are Mutable
Arrays in JavaScript are **mutable**, meaning you can modify their contents (e.g., change, add, or remove elements) even if declared with `const`. However, you cannot reassign the entire array when using `const`.

```javascript
const fruits = ["apple", "banana", "mango"];

// Change an element
fruits[1] = "orange";
console.log(fruits); // ["apple", "orange", "mango"]

// Add a new element
fruits.push("grapes");
console.log(fruits); // ["apple", "orange", "mango", "grapes"]

// Remove the last element
fruits.pop();
console.log(fruits); // ["apple", "orange", "mango"]
```

---

## Array Declaration

### 1. Using Square Brackets `[]` (Most Common)
```javascript
let numbers = [10, 20, 30];
console.log(numbers); // [10, 20, 30]
```

### 2. Using `new Array()` Constructor
```javascript
const cars = new Array("BMW", "Audi", "Tesla");
console.log(cars); // ["BMW", "Audi", "Tesla"]
```

### 3. Declaring an Empty Array
```javascript
const emptyList = [];
emptyList.push("item1");
console.log(emptyList); // ["item1"]
```

### 4. Array with Mixed Data Types
```javascript
const mixed = [42, "hello", true, { key: "value" }, [1, 2]];
console.log(mixed); // [42, "hello", true, { key: "value" }, [1, 2]]
```

---

## Accessing Values in an Array
Arrays are **zero-indexed**, meaning the first element is at index `0`, the second at index `1`, and so on. The last element is at `array.length - 1`. Accessing a non-existent index returns `undefined`.

**Syntax**:
```javascript
arrayName[index]
```

```javascript
const colors = ["red", "green", "blue"];

console.log(colors[0]); // "red"
console.log(colors[1]); // "green"
console.log(colors[2]); // "blue"
console.log(colors[colors.length - 1]); // "blue" (last element)
```

### Accessing Elements in Nested Arrays
```javascript
const data = [10, [20, 30], [40, [50, 60]]];

console.log(data[1][0]); // 20
console.log(data[2][1][1]); // 60
console.log(data[2][1][data[2][1].length - 1]); // 60 (last element in nested array)
```

### Accessing Object Properties Inside Arrays
```javascript
const users = [{ name: "Akash" }, { name: "Shubham" }];

console.log(users[0].name); // "Akash"
console.log(users[1].name); // "Shubham"
console.log(users[users.length - 1].name); // "Shubham" (last user's name)
```

---

## Holes in Arrays (Sparse Arrays)
A **hole** in an array is a position with no assigned value (not even `undefined`). These are called **sparse arrays**.

```javascript
let arr = [1, , 3];
console.log(arr); // [1, <1 empty item>, 3]
console.log(arr.length); // 3
console.log(arr[1]); // undefined
```