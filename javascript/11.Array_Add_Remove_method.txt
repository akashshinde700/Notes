                                                                 Array Methods

                                                         1. Adding / Removing Items (8)

===================================================================================================================================================                                                         
                                                             âœ… 1. push()

Adds an element at the end of the array

                                                             âœ…Syntax

array.push()

                                                             âœ…Example

let fruits = ['apple', 'banana'];
fruits.push('orange');
console.log(fruits); // ['apple', 'banana', 'orange']

                                                             âœ… Explanation:

Original Array:
['apple', 'banana']
push('orange')
â†’ Adds 'orange' to the end of the array
The push() method modifies the original array                                                             

===================================================================================================================================================

                                                             âœ… 2. pop()

Removes the last element from the array

                                                             âœ…Syntax

array.pop()  

                                                             âœ…Example

let fruits = ['apple', 'banana', 'orange'];
fruits.pop();
console.log(fruits); // ['apple', 'banana']

                                                             âœ… Explanation:

Original Array:
['apple', 'banana', 'orange']
pop()
â†’ Removes the last element of the array
â†’ 'orange' is removed
The pop() method modifies the original array
â†’ It also returns the removed value (if needed)                                                             

===================================================================================================================================================

                                                             âœ… 3. unshift()

Adds an element at the beginning of the array

                                                             âœ…Syntax

array.unshift()

                                                             âœ…Example

let fruits = ['banana', 'orange'];
fruits.unshift('apple');
console.log(fruits); // ['apple', 'banana', 'orange']

                                                            âœ… Explanation:

Original Array:
['banana', 'orange']
unshift('apple')
â†’ Adds 'apple' to the beginning of the array
â†’ Shifts existing items to the right
unshift() modifies the original array
â†’ It also returns the new length of the array (not shown here)                                                            

===================================================================================================================================================

                                                             âœ… 4. shift()

Removes the first element from the array

                                                             âœ…Syntax

array.shift()

                                                             âœ…Example

let fruits = ['apple', 'banana', 'orange'];
fruits.shift();
console.log(fruits); // ['banana', 'orange']

                                                             âœ… Explanation:

'apple' (first element) is removed
Array becomes: ['banana', 'orange']
The removed item 'apple' is stored in the variable removed

===================================================================================================================================================

                                                             âœ… 5. splice(start, deleteCount, item1, item2, ...)

Used to add or remove items from an array at a specific position.
It changes the original array.

                                                             âœ…Syntax

array.splice(startIndex, numberToRemove, itemToAdd1, itemToAdd2, ...);

                                                            âœ…Example

let fruits = ['apple', 'banana', 'orange'];

// Remove 1 item at index 1
fruits.splice(1, 1);
console.log(fruits); // ['apple', 'orange']

                                                            âœ…Explanation: 

Start from index 1 â†’ 'banana'
Remove 1 item
So 'banana' is removed

                                                            âœ…Example

// Add 'grape' at index 1
fruits.splice(1, 0, 'grape');
console.log(fruits); // ['apple', 'grape', 'orange']

                                                            âœ…Explanation: 

Start at index 1
Remove 0 items (just insert)
Add 'grape' at that position

===================================================================================================================================================

                                                            âœ… 6. slice(start, end)

slice() method does NOT change or affect the original array.

                                                            âœ…Syntax

array.slice(start, end)

                                                            âœ…Example

let fruits = ['apple', 'banana', 'orange', 'grape'];
let sliced = fruits.slice(1, 3);
console.log(sliced); // ['banana', 'orange']
console.log(fruits); // ['apple', 'banana', 'orange', 'grape']

                                                            âœ…Explanation: 

slice(1, 3) means:
Start at index 1 â†’ 'banana'
Go up to (but not including) index 3 â†’ 'grape' is not included
So it gives: ['banana', 'orange']

ðŸ’¡ Original array is still the same

sliced is the new array: ['banana', 'orange']
fruits is the original array, and it stays the same: ['apple', 'banana', 'orange', 'grape']

===================================================================================================================================================

                                                           âœ…7. fill(value, start, end)

It fills part of an array with the same value.

                                                           âœ…Syntax

array.fill(value, start, end)

                                                           âœ…Example

let numbers = [1, 2, 3, 4];
numbers.fill(0, 1, 3);
console.log(numbers); // [1, 0, 0, 4]

                                                           âœ…Explanation: 

fill(0, 1, 3) means:
Start from index 1
Stop before index 3
Fill with value 0
So, index 1 and 2 get replaced with 0
Final array: [1, 0, 0, 4]

===================================================================================================================================================

                                                           âœ… 8. copyWithin(target, start, end)

It copies part of the array and pastes it to another position (overwriting existing  values).                 

                                                           âœ…Syntax

array.copyWithin(target, start, end)

                                                           âœ…Example

let numbers = [1, 2, 3, 4, 5];
numbers.copyWithin(1, 3); 
console.log(numbers); // [1, 4, 5, 4, 5]

                                                           âœ…Explanation: 

copyWithin(1, 3) means:
Copy from index 3 to the end â†’ [4, 5]
Paste it starting at index 1
So, 2 and 3 get replaced
Final array: [1, 4, 5, 4, 5]

===================================================================================================================================================